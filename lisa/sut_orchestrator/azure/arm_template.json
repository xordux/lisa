{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "storage_name": {
            "type": "string",
            "metadata": {
                "description": "storage name for boot diagnosis"
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "location"
            }
        },
        "nodes": {
            "type": "array",
            "metadata": {
                "description": "all nodes"
            }
        },
        "admin_username": {
            "type": "string",
            "metadata": {
                "description": "user name"
            }
        },
        "admin_password": {
            "type": "string",
            "metadata": {
                "description": "password"
            }
        },
        "admin_key_data": {
            "type": "string",
            "metadata": {
                "description": "public key data"
            }
        },
        "shared_resource_group_name": {
            "type": "string",
            "metadata": {
                "description": "the name of shared resource group"
            }
        },
        "subnet_count": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "created subnet count"
            }
        },
        "use_availability_sets": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "flag to create availability set"
            }
        },
        "availability_set_tags": {
            "type": "object",
            "metadata": {
                "description": "tags of availability set"
            }
        },
        "virtual_network_resource_group": {
            "type": "string",
            "metadata": {
                "description": "the name of vnet resource group"
            }
        },
        "virtual_network_name": {
            "type": "string",
            "metadata": {
                "description": "the name of vnet"
            }
        },
        "subnet_prefix": {
            "type": "string",
            "metadata": {
                "description": "the prefix of the subnets"
            }
        },
        "vm_tags": {
            "type": "object",
            "metadata": {
                "description": "tags of virtual machine"
            }
        },
        "availability_set_properties": {
            "type": "object",
            "metadata": {
                "description": "properties of availability set"
            }
        },
        "data_disks": {
            "type": "array",
            "metadata": {
                "description": "data disk array."
            }
        }
    },
    "variables": {
        "vnet_id": "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtual_network_name'))]",
        "node_count": "[length(parameters('nodes'))]",
        "availability_set_name": "lisa-availabilitySet",
        "existing_subnet_ref": "[if(not(empty('virtual_network_resource_group')), resourceId(parameters('virtual_network_resource_group'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtual_network_name'), parameters('subnet_prefix')), '')]"
    },
    "resources": [
        {
            "apiVersion": "2019-07-01",
            "type": "Microsoft.Compute/availabilitySets",
            "condition": "[parameters('use_availability_sets')]",
            "name": "[variables('availability_set_name')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('availability_set_tags')]",
            "sku": {
                "name": "Aligned"
            },
            "properties": "[parameters('availability_set_properties')]"
        },
        {
            "apiVersion": "2020-05-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "location": "[parameters('location')]",
            "name": "[concat(parameters('nodes')[copyIndex('publicIpCopy')]['name'],'-public-ip')]",
            "copy": {
                "name": "publicIpCopy",
                "count": "[variables('node_count')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            }
        },
        {
            "condition": "[empty('virtual_network_resource_group')]",
            "apiVersion": "2020-05-01",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('virtual_network_name')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "copy": [
                    {
                        "name": "subnets",
                        "count": "[parameters('subnet_count')]",
                        "input": {
                            "name": "[concat(parameters('subnet_prefix'), copyIndex('subnets'))]",
                            "properties": {
                                "addressPrefix": "[concat('10.0.', copyIndex('subnets'), '.0/24')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "copy": {
                "name": "nicCopy",
                "count": "[variables('node_count')]"
            },
            "name": "[concat(parameters('nodes')[copyIndex('nicCopy')]['name'],'-nics')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', concat(parameters('nodes')[copyIndex('nicCopy')]['name'],'-public-ip'))]",
                "[variables('vnet_id')]"
            ],
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "vmName": {
                        "value": "[parameters('nodes')[copyIndex('nicCopy')]['name']]"
                    },
                    "nic_count": {
                        "value": "[parameters('nodes')[copyIndex('nicCopy')]['nic_count']]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vnet_id": {
                        "value": "[variables('vnet_id')]"
                    },
                    "subnet_prefix": {
                        "value": "[parameters('subnet_prefix')]"
                    },
                    "existing_subnet_ref": {
                        "value": "[variables('existing_subnet_ref')]"
                    },
                    "enable_sriov": {
                        "value": "[parameters('nodes')[copyIndex('nicCopy')]['enable_sriov']]"
                    }
                },
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "vmName": {
                            "type": "string"
                        },
                        "nic_count": {
                            "type": "int"
                        },
                        "location": {
                            "type": "string"
                        },
                        "vnet_id": {
                            "type": "string"
                        },
                        "subnet_prefix": {
                            "type": "string"
                        },
                        "existing_subnet_ref": {
                            "type": "string"
                        },
                        "enable_sriov": {
                            "type": "bool"
                        }
                    },
                    "resources": [
                        {
                            "apiVersion": "2020-05-01",
                            "type": "Microsoft.Network/networkInterfaces",
                            "copy": {
                                "name": "internalNicCopy",
                                "count": "[parameters('nic_count')]"
                            },
                            "name": "[concat(parameters('vmName'), '-nic-', copyIndex('internalNicCopy'))]",
                            "location": "[parameters('location')]",
                            "properties": {
                                "ipConfigurations": [
                                    {
                                        "name": "IPv4Config",
                                        "properties": {
                                            "privateIPAddressVersion": "IPv4",
                                            "publicIPAddress": "[if(equals(0, copyIndex('internalNicCopy')), network.getPublicIpAddress(parameters('vmName')), json('null'))]",
                                            "subnet": {
                                                "id": "[if(not(empty(parameters('existing_subnet_ref'))), parameters('existing_subnet_ref'), concat(parameters('vnet_id'),'/subnets/', concat(parameters('subnet_prefix'), copyIndex('internalNicCopy'))))]"
                                            },
                                            "privateIPAllocationMethod": "Dynamic"
                                        }
                                    }
                                ],
                                "enableAcceleratedNetworking": "[parameters('enable_sriov')]"
                            }
                        }
                    ],
                    "functions": [
                        {
                            "namespace": "network",
                            "members": {
                                "getPublicIpAddress": {
                                    "parameters": [
                                        {
                                            "name": "vmName",
                                            "type": "string"
                                        }
                                    ],
                                    "output": {
                                        "type": "object",
                                        "value": {
                                            "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat(parameters('vmName'),'-public-ip'))]"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "apiVersion": "2019-03-01",
            "type": "Microsoft.Compute/images",
            "copy": {
                "name": "imageCopy",
                "count": "[variables('node_count')]"
            },
            "condition": "[not(empty(parameters('nodes')[copyIndex('imageCopy')]['vhd']))]",
            "name": "[concat(parameters('nodes')[copyIndex('imageCopy')]['name'], '-image')]",
            "location": "[parameters('location')]",
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "osType": "Linux",
                        "osState": "Generalized",
                        "blobUri": "[parameters('nodes')[copyIndex('imageCopy')]['vhd']]",
                        "storageAccountType": "Standard_LRS"
                    }
                },
                "hyperVGeneration": "[concat('V', parameters('nodes')[copyIndex('imageCopy')]['hyperv_generation'])]"
            }
        },
        {
            "apiVersion": "2022-03-01",
            "type": "Microsoft.Compute/virtualMachines",
            "copy": {
                "name": "vmCopy",
                "count": "[variables('node_count')]"
            },
            "name": "[parameters('nodes')[copyIndex('vmCopy')]['name']]",
            "location": "[parameters('nodes')[copyIndex('vmCopy')]['location']]",
            "tags": "[parameters('vm_tags')]",
            "plan": "[parameters('nodes')[copyIndex('vmCopy')]['purchase_plan']]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', variables('availability_set_name'))]",
                "[resourceId('Microsoft.Compute/images', concat(parameters('nodes')[copyIndex('vmCopy')]['name'], '-image'))]",
                "[concat(parameters('nodes')[copyIndex('vmCopy')]['name'],'-nics')]"
            ],
            "properties": {
                "availabilitySet": "[if(parameters('use_availability_sets'), json(concat('{\"id\": \"',resourceId('Microsoft.Compute/availabilitySets',variables('availability_set_name')),'\"}')), json('null'))]",
                "hardwareProfile": {
                    "vmSize": "[parameters('nodes')[copyIndex('vmCopy')]['vm_size']]"
                },
                "osProfile": {
                    "computername": "[parameters('nodes')[copyIndex('vmCopy')]['short_name']]",
                    "adminUsername": "[parameters('admin_username')]",
                    "adminPassword": "[if(or(empty(parameters('admin_key_data')), not(parameters('nodes')[copyIndex('vmCopy')]['is_linux'])), parameters('admin_password'), json('null'))]",
                    "linuxConfiguration": "[if(and(not(empty(parameters('admin_key_data'))), parameters('nodes')[copyIndex('vmCopy')]['is_linux']), lisa.getLinuxConfiguration(concat('/home/', parameters('admin_username'), '/.ssh/authorized_keys'), parameters('admin_key_data')), json('null'))]"
                },
                "storageProfile": {
                    "imageReference": "[if(not(empty(parameters('nodes')[copyIndex('vmCopy')]['vhd'])), lisa.getOsDiskVhd(parameters('nodes')[copyIndex('vmCopy')]['name']), if(not(empty(parameters('nodes')[copyIndex('vmCopy')]['shared_gallery'])), lisa.getOsDiskSharedGallery(parameters('nodes')[copyIndex('vmCopy')]['shared_gallery']), lisa.getOsDiskMarketplace(parameters('nodes')[copyIndex('vmCopy')])))]",
                    "osDisk": {
                        "name": "[concat(parameters('nodes')[copyIndex('vmCopy')]['name'], '-osDisk')]",
                        "diffDiskSettings": "[if(equals(parameters('nodes')[copyIndex('vmCopy')]['disk_type'], 'Ephemeral'), json('{\"option\": \"local\", \"placement\": \"CacheDisk\"}'), json('null'))]",
                        "managedDisk": "[if(not(equals(parameters('nodes')[copyIndex('vmCopy')]['disk_type'], 'Ephemeral')), json(concat('{\"storageAccountType\": \"',parameters('nodes')[copyIndex('vmCopy')]['disk_type'],'\"}')), json('null'))]",
                        "caching": "[if(equals(parameters('nodes')[copyIndex('vmCopy')]['disk_type'], 'Ephemeral'), 'ReadOnly', 'ReadWrite')]",
                        "createOption": "FromImage",
                        "diskSizeGB": "[parameters('nodes')[copyIndex('vmCopy')]['osdisk_size_in_gb']]"
                    },
                    "copy": [
                        {
                            "name": "dataDisks",
                            "count": "[length(parameters('data_disks'))]",
                            "input": {
                                "name": "[concat(parameters('nodes')[copyIndex('vmCopy')]['name'], '-data-disk-', copyIndex('dataDisks'))]",
                                "createOption": "[parameters('data_disks')[copyIndex('dataDisks')].create_option]",
                                "caching": "[parameters('data_disks')[copyIndex('dataDisks')].caching_type]",
                                "diskSizeGB": "[parameters('data_disks')[copyIndex('dataDisks')].size]",
                                "lun": "[copyIndex('dataDisks')]",
                                "managedDisk": {
                                    "storageAccountType": "[parameters('data_disks')[copyIndex('dataDisks')].type]"
                                }
                            }
                        }
                    ]
                },
                "networkProfile": {
                    "copy": [
                        {
                            "name": "networkInterfaces",
                            "count": "[parameters('nodes')[copyIndex('vmCopy')]['nic_count']]",
                            "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('nodes')[copyIndex('vmCopy')]['name'], '-nic-', copyIndex('networkInterfaces')))]",
                                "properties": {
                                    "primary": "[if(equals(copyIndex('networkInterfaces'),0), json('true'), json('false'))]"
                                }
                            }
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId(parameters('shared_resource_group_name'), 'Microsoft.Storage/storageAccounts', parameters('storage_name')), '2015-06-15').primaryEndpoints['blob']]"
                    }
                }
            }
        }
    ],
    "functions": [
        {
            "namespace": "lisa",
            "members": {
                "getOsDiskMarketplace": {
                    "parameters": [
                        {
                            "name": "node",
                            "type": "object"
                        }
                    ],
                    "output": {
                        "type": "object",
                        "value": "[parameters('node')['marketplace']]"
                    }
                },
                "getOsDiskSharedGallery": {
                    "parameters": [
                        {
                            "name": "node",
                            "type": "object"
                        }
                    ],
                    "output": {
                        "type": "object",
                        "value": {
                            "id": "[resourceId(parameters('node')['subscription_id'], if(empty(parameters('node')['resource_group_name']), 'None', parameters('node')['resource_group_name']), 'Microsoft.Compute/galleries/images/versions', parameters('node')['image_gallery'], parameters('node')['image_definition'], parameters('node')['image_version'])]"
                        }
                    }
                },
                "getOsDiskVhd": {
                    "parameters": [
                        {
                            "name": "vmName",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "object",
                        "value": {
                            "id": "[resourceId('Microsoft.Compute/images', concat(parameters('vmName'), '-image'))]"
                        }
                    }
                },
                "getLinuxConfiguration": {
                    "parameters": [
                        {
                            "name": "keyPath",
                            "type": "string"
                        },
                        {
                            "name": "publicKeyData",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "object",
                        "value": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "[parameters('keyPath')]",
                                        "keyData": "[parameters('publicKeyData')]"
                                    }
                                ]
                            },
                            "provisionVMAgent": true
                        }
                    }
                }
            }
        }
    ]
}
